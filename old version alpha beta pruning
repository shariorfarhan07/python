{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"old version alpha beta pruning ","provenance":[{"file_id":"1VJUHhF-IQdzB47ZsDfw12GsgTw6HC-vr","timestamp":1616078957289}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"l_Go4c7JaeFW"},"source":["class node:\n","  count=0\n","  def __init__(self):\n","    self.value=None\n","    self.child=[]\n","    self.nodenumber=node.count\n","    node.count+=1\n","  def addchild(self,a):\n","    self.child.append(a)\n","  def __str__(self):\n","    return \"node\"+str(self.nodenumber)\n","  def printchild(self):\n","    s=\"\"\n","    for i in self.child:\n","      s=s+\"-->\"+str(i)\n","    return s+\"\\n\"\n","  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dKqE2Oh28HZ5"},"source":["noOfterm=1*2\n","branch=3\n","min=1\n","max=20"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VC_Cw7St6sK_","executionInfo":{"status":"ok","timestamp":1627552793737,"user_tz":-360,"elapsed":9,"user":{"displayName":"Md Sharior Hossain Farhan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiGdAQFghBokjILqPjNBrzTYH2apA7Q2VsrXhq=s64","userId":"12833581032909198047"}},"outputId":"95ee02c4-060b-4256-b004-325243da1639"},"source":["import random\n","random.seed(300)\n","\n","def makegraph(noOfterm,branch,max,min,n):\n","  if n==None:\n","    n=node()\n","  if noOfterm!=1:\n","    for i in range(branch):\n","      n.addchild(node())\n","      makegraph(noOfterm-1,branch,max,min,n.child[i])\n","    \n","  else:\n","    for i in range(branch):\n","      c=node()\n","      c.value=random.randint(min,max);\n","      n.addchild(c)\n","  \n","  return n\n","\n","a=makegraph(noOfterm,branch,max,min,None)\n"," \n","\n","print(a.child)\n","print(a.child[0].child)\n","print(a.child[1].child)\n","print(a.child[2].child)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[<__main__.node object at 0x7fc5d5cde290>, <__main__.node object at 0x7fc5d5cde410>, <__main__.node object at 0x7fc5d5cde510>]\n","[<__main__.node object at 0x7fc5d5cde350>, <__main__.node object at 0x7fc5d5cde390>, <__main__.node object at 0x7fc5d5cde3d0>]\n","[<__main__.node object at 0x7fc5d5cde450>, <__main__.node object at 0x7fc5d5cde490>, <__main__.node object at 0x7fc5d5cde4d0>]\n","[<__main__.node object at 0x7fc5d5cde550>, <__main__.node object at 0x7fc5d5cde590>, <__main__.node object at 0x7fc5d5cde5d0>]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_mFAqBXgI0rm"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CLz3gELTZ9s_"},"source":["def max(a,b):\n","  if a>b:\n","    return a\n","  return b\n","def min(a,b):\n","  if a<b:\n","    return a\n","  return b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n4nRjGC9I8qo"},"source":["import math as m\n","\n","count=0\n","def minimax(node, depth, maximizing):\n","  global count\n","  if depth == 0:\n","    count+=1\n","    return node.value \n","  \n","  if maximizing:\n","    maxEval = -m.inf\n","    for child in node.child:\n","      eval = minimax(child, depth - 1, False)\n","      maxEval = max(maxEval, eval)\n","    return maxEval\n","  else:\n","    minEval = m.inf\n","    for child in node.child:\n","      eval = minimax(child, depth - 1, True)\n","      minEval = min(minEval, eval)\n","     \n","    return minEval"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XsFGfXhcNIep"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"idTfre9WZ4S5","executionInfo":{"status":"ok","timestamp":1627552813471,"user_tz":-360,"elapsed":329,"user":{"displayName":"Md Sharior Hossain Farhan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiGdAQFghBokjILqPjNBrzTYH2apA7Q2VsrXhq=s64","userId":"12833581032909198047"}},"outputId":"534a2137-1770-4217-f804-2e33dc382ff8"},"source":["import math as m\n","\n","count=0\n","def minimaxAB(node, depth,alpha, beta, maximizing):\n","  global count\n","  if depth == 0:\n","    count+=1\n","    return node.value \n","  \n","  if maximizing:\n","    maxEval = -m.inf\n","    for child in node.child:\n","      eval = minimaxAB(child, depth - 1,alpha, beta, False)\n","      maxEval = max(maxEval, eval)\n","      alpha = max(alpha, eval)\n","      if beta <= alpha:\n","        break\n","    return maxEval\n","  else:\n","    minEval = m.inf\n","    for child in node.child:\n","      eval = minimaxAB(child, depth - 1,alpha, beta, True)\n","      minEval = min(minEval, eval)\n","      beta = min(beta, eval)\n","      if beta <= alpha:\n","        break     \n","    return minEval\n","c=minimaxAB(a, 2,-m.inf,m.inf, True)\n","print(c)\n","print(count)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["14\n","7\n"],"name":"stdout"}]}]}